// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "greet.proto" (package "greet", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * The request message containing the user's name.
 *
 * @generated from protobuf message greet.HelloRequest
 */
export interface HelloRequest {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
}
/**
 * The response message containing the greetings.
 *
 * @generated from protobuf message greet.HelloReply
 */
export interface HelloReply {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * The
 *
 * @generated from protobuf message greet.WeatherForecast
 */
export interface WeatherForecast {
    /**
     * @generated from protobuf field: string city = 1
     */
    city: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 2
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: int32 temperatureC = 3
     */
    temperatureC: number;
    /**
     * @generated from protobuf field: int32 temperatureF = 4
     */
    temperatureF: number;
    /**
     * @generated from protobuf field: string summary = 5
     */
    summary: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType<HelloRequest> {
    constructor() {
        super("greet.HelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloRequest>): HelloRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<HelloRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloRequest): HelloRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message greet.HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloReply$Type extends MessageType<HelloReply> {
    constructor() {
        super("greet.HelloReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloReply>): HelloReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<HelloReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloReply): HelloReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message greet.HelloReply
 */
export const HelloReply = new HelloReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeatherForecast$Type extends MessageType<WeatherForecast> {
    constructor() {
        super("greet.WeatherForecast", [
            { no: 1, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "date", kind: "message", T: () => Timestamp },
            { no: 3, name: "temperatureC", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "temperatureF", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WeatherForecast>): WeatherForecast {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.city = "";
        message.temperatureC = 0;
        message.temperatureF = 0;
        message.summary = "";
        if (value !== undefined)
            reflectionMergePartial<WeatherForecast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeatherForecast): WeatherForecast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string city */ 1:
                    message.city = reader.string();
                    break;
                case /* google.protobuf.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* int32 temperatureC */ 3:
                    message.temperatureC = reader.int32();
                    break;
                case /* int32 temperatureF */ 4:
                    message.temperatureF = reader.int32();
                    break;
                case /* string summary */ 5:
                    message.summary = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeatherForecast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string city = 1; */
        if (message.city !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.city);
        /* google.protobuf.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 temperatureC = 3; */
        if (message.temperatureC !== 0)
            writer.tag(3, WireType.Varint).int32(message.temperatureC);
        /* int32 temperatureF = 4; */
        if (message.temperatureF !== 0)
            writer.tag(4, WireType.Varint).int32(message.temperatureF);
        /* string summary = 5; */
        if (message.summary !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.summary);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message greet.WeatherForecast
 */
export const WeatherForecast = new WeatherForecast$Type();
/**
 * @generated ServiceType for protobuf service greet.Greeter
 */
export const Greeter = new ServiceType("greet.Greeter", [
    { name: "SayHello", options: {}, I: HelloRequest, O: HelloReply },
    { name: "GetWeatherForecast", options: {}, I: Empty, O: WeatherForecast }
]);
